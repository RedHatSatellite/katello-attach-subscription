#!/usr/bin/env ruby

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

# support for bundler, currently commented out
#require 'rubygems'
#require 'bundler/setup'
require 'optparse'
require 'yaml'
require 'apipie-bindings'

@defaults = {
  :noop      => false,
  :uri       => 'https://localhost/',
  :timeout   => 300,
  :user      => 'admin',
  :pass      => 'changeme',
  :org       => 1,
  :usecache  => false,
  :cachefile => 'katello-attach-subscription.cache',
  :debug     => false,
  :search    => nil,
  :verify_ssl  => true,
}

@options = {
  :yamlfile  => 'katello-attach-subscription.yaml',
}

# Parse the command line options
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{opts.program_name} [options]"
  opts.version = "0.1"

  opts.on("-U", "--uri=URI", "URI to the Satellite") do |u|
    @options[:uri] = u
  end
  opts.on("-t", "--timeout=TIMEOUT", OptionParser::DecimalInteger, "Timeout value in seconds for any API calls. -1 means never timeout") do |t|
    @options[:timeout] = t
  end
  opts.on("-u", "--user=USER", "User to log in to Satellite") do |u|
    @options[:user] = u
  end
  opts.on("-p", "--pass=PASS", "Password to log in to Satellite") do |p|
    @options[:pass] = p
  end
  opts.on("-o", "--organization-id=ID", "ID of the Organization") do |o|
    @options[:org] = o
  end
  opts.on("-c", "--config=FILE", "configuration in YAML format") do |c|
    @options[:yamlfile] = c
  end
  opts.on("-n", "--noop", "do not actually execute anything") do
    @options[:noop] = true
  end
  opts.on("-H", "--used-hypervisors-only", "only search for hypervisors that are in use") do
    @options[:search] = 'virtual_guests:*'
  end
  opts.on("-s", "--search=SEARCH", "search for machines matching this string only") do |s|
    @options[:search] = s
  end
  opts.on("--use-cache", "use cache file") do
    @options[:usecache] = true
  end
  opts.on("--cache-file=FILE", "read or write to cache file, based on --use-cache value") do |cf|
    @options[:cachefile] = cf
  end
  opts.on("-d", "--debug", "debug the script") do
    @options[:debug] = true
  end
  opts.on("--no-verify-ssl", "don't verify SSL certs") do
    @options[:verify_ssl] = false
  end
end
optparse.parse!

# load the configuration files settings
@yaml = YAML.load_file(@options[:yamlfile])

# override configuration files settings with command lines one
if @yaml.has_key?(:settings) and @yaml[:settings].is_a?(Hash)
  @yaml[:settings].each do |key,val|
    if not @options.has_key?(key)
      @options[key] = val
    end
  end
end

# missing configuration parameters from file or command line are taken from the default one
@defaults.each do |key,val|
  if not @options.has_key?(key)
    @options[key] = val
  end
end


# create api binding
@api = ApipieBindings::API.new({:uri => @options[:uri], :username => @options[:user], :password => @options[:pass], :api_version => '2', :timeout => @options[:timeout]}, {:verify_ssl => @options[:verify_ssl]})

def fetch_all_results(resource, action, params)
  page = 0
  req = nil
  results = []
  while (page == 0 or req['results'].length == req['per_page'].to_i)
    # increase page counter
    page += 1
    # get 100 results
    params.merge!({:page => page, :per_page => 100})
    req = @api.resource(resource).call(action, params)
    # concatenate output - all of the results
    results.concat(req['results'])
  end
  results
end

# main function
def vdcupdate()
  # satellite url has to start with https or PUT will fail with http error
  unless @options[:uri].start_with?('https://')
    abort "FATAL ERROR: the uri must start with https://"
  end

  @default_type = nil

  # initialize variables
  systems = []
  system_details = {}
  subs = {}
  page = 0
  req = nil
  cachefile = @options[:cachefile].to_s + "_org" + @options[:org].to_s

  # Fill systems array from API of satellite. Check for cache usage.
  if @options[:usecache] and File.file?(cachefile)
    begin
      cacheyaml = YAML.load_file(cachefile)
      systems = cacheyaml['systems']
      system_details = cacheyaml['system_details']
    rescue Exception
      abort " FATAL ERROR: Failed to read cache file. re-run without --use-cache."
    end
  else
    # no cache wanted or no cache file exists
    systems = fetch_all_results(:host, :index, {:organization_id => @options[:org], :search => @options[:search]})
  end

  # cycle for each system found
  systems.each do |system|
    # initialize variable
    has_desired_sub = nil
    desired_sub = nil
    desired_sub_hash = nil
    desired_type = @default_type
    remove_other = true
    remove_subs = []
    keep_subs = []
    auto_attach = false
    keep_virt_only = false
    virtual_host = nil

    # get detail for each system
    if @options[:debug]
      puts " DEBUG: detail of the current system to be checked:"
      p system
    end
    sys = @api.resource(:hosts).call(:show, {:id => system['id'], :fields => 'full'})
    # add to array system the name of the system itself taken from id
    puts "Current system: #{system['name']} (#{system['id']})"

    # for each item in yaml extract sub
    if @options[:debug]
      puts " DEBUG: YAML dump with all definitions for the current system"
      p @yaml
    end
    @yaml[:subs].each do |sub|
      # extract the name of the host to be registered
      hostnameregex = Regexp.new(sub['hostname'])
      if @options[:debug]
        puts "  DEBUG: Current pattern in sub: '#{sub['hostname'].inspect}', the extracted pattern is '#{hostnameregex.inspect}'"
      end

      # extract the (possible) virtual_host
      if sub.has_key?('virtual_host')
        virtualhostregex = Regexp.new(sub['virtual_host'])
      else
        virtualhostregex = nil
      end
      # check if the current system match the desired one
      if hostnameregex.match(system['name'])
        if @options[:debug]
          puts " DEBUG: System '#{system['name']}' match the regexp"
        end
        # if "type" has been specified on yaml file check if match.
        # the default is to check on "Hypervisor"
        # if DO NOT match, skip to next sub
        # fixme: can't find this detail in new API
        if sub.has_key?('type')
          desired_type = sub['type']
        end
        if @default_type and sys['type'] != desired_type
          puts "Skipping '#{system['name']}' as system type '#{sys['type']}' is different from desired '#{desired_type}'"
          next
        end


        # check if we have a virtual_host
        if virtualhostregex
          system_details[system['id']] ||= @api.resource(:hosts).call(:show, {:organization_id => @options[:org], :id => system['id'], :fields => 'full'})
          # fixme: look at subscription_facet_attributes
          virtual_host_name = nil
          if system_details[system['id']].has_key?('virtual_host') and system_details[system['id']]['virtual_host'] and system_details[system['id']]['virtual_host'].has_key?('name')
            virtual_host_name = system_details[system['id']]['virtual_host']['name']
          elsif system_details[system['id']].has_key?('subscription_facet_attributes') and system_details[system['id']]['subscription_facet_attributes'] and system_details[system['id']]['subscription_facet_attributes'].has_key?('virtual_host') and system_details[system['id']]['subscription_facet_attributes']['virtual_host'] and system_details[system['id']]['subscription_facet_attributes']['virtual_host'].has_key?('name')
            virtual_host_name = system_details[system['id']]['subscription_facet_attributes']['virtual_host']['name']
          end
          if virtual_host_name
            if not virtualhostregex.match(virtual_host_name)
              puts "Skipping '#{system['name']}' as the system should be on #{sub['virtual_host']} but it is on #{virtual_host_name}"
              next
            end
          else
             puts "Skipping '#{system['name']}' as the system should have a virtual host, but it does not."
             next
          end
        end

        # set the desidered subscription to be associated
        if sub.has_key?('sub')
          desired_sub_hash = sub['sub']
        end
        # if "remove_other" has been set, set the flag
        if sub.has_key?('remove_other')
          remove_other = sub['remove_other']
        end
        # if "remove_subs" has been set, use it
        if sub.has_key?('remove_subs')
          remove_subs = sub['remove_subs']
        end
        # if "keep_subs" has been set, use it
        if sub.has_key?('keep_subs')
          keep_subs = sub['keep_subs']
        end
        # if "auto_attach" has been set, set the flag
        if sub.has_key?('auto_attach')
          auto_attach = sub['auto_attach']
        end
        # if "keep_virt_only" has been set, set the flag
        if sub.has_key?('keep_virt_only')
          keep_virt_only = sub['keep_virt_only']
        end
        # if the system is found, stop cyclyng over yaml,
        break
      else
        if @options[:verbose]
          puts "  VERBOSE: skipping '#{system['name']}' as the system do not match following regexp:"
          puts "           '#{sub['hostname']}'"
        end
      end
    end

    # check if one or more hosts need a subscription
    if @options[:debug]
      puts " DEBUG: desired_sub_hash value"
      p desired_sub_hash
    end
    if desired_sub_hash or not remove_subs.empty?
      # maybe we do not have any subs to add, but remove_subs was not empty
      if not desired_sub_hash
        desired_sub_hash = {'none' => []}
      end

      if @options[:debug]
        puts " DEBUG: Checking subscription for #{system['name']} (#{system['id']})"
      end
      has_desired_sub_hash = {}
      # for every product (hash key in yaml) check the desired subs
      desired_sub_hash.each do |product, desidered_product_sub_array|
        if @options[:debug]
          puts "   DEBUG: in the desired_sub_hash #{desidered_product_sub_array}"
        end
        has_desired_sub = false
        # check the current associated subscription to this system
        req = @api.resource(:host_subscriptions).call(:index, {:organization_id => @options[:org], :host_id => system['id'], :per_page => 100})
        # check a single subscription in the array
        req['results'].each do |sub|
          # move subscription_id key to cp_id, to have a standard API interface
          # Katello 2.2 do not have cp_id, in subscription_id there is the id of the sub
          # Katello 3.0 has cp_id with the id of the sub (to be confirmed) and subscription_id populated with an integer
          if sub.has_key?('subscription_id') and !(sub.has_key?('cp_id')) and !(sub['subscription_id'].is_a?(Integer))
            sub['cp_id'] = sub.delete('subscription_id')
          end
          if @options[:debug]
            puts "DEBUG: subscription detail"
            p sub
            p desired_sub_hash.flatten(2)
          end
          # check if the found cp_id is in the list of the current product, if it is, our job here is done
          if desidered_product_sub_array.include?(sub['cp_id'])
            puts " subscription #{sub['cp_id']} for #{product} product is already attached to #{system['id']}"
            has_desired_sub = true
          # else, if this is not among the desired subscriptions (ALL of them, not only the current product)
          # and remove_other is set, remove this subscription to the system
          elsif sub['cp_id'] != nil and not desired_sub_hash.flatten(2).include?(sub['cp_id']) and (remove_other or remove_subs.include?(sub['cp_id'])) and not (keep_virt_only and sub.has_key?('virt_only') and sub['virt_only']) and not keep_subs.include?(sub['cp_id'])
            puts " removing subscription #{sub['cp_id']} from system #{system['id']}"
            if not @options[:noop]
              @api.resource(:host_subscriptions).call(:remove_subscriptions, {:host_id => system['id'], :subscriptions => [{:id => sub['id']}]})
              puts "  removed"
            else
              puts "  [noop] removed"
            end
          end
        end
        # if all of the subscriptions marked for this product is missing, mark it to be added
        if not desidered_product_sub_array.empty? and not has_desired_sub
          puts "  Subscription on host #{system['name']} for product " + product.to_s + " currently missing. Set for the attach."
          has_desired_sub_hash[product] = desidered_product_sub_array
        end
      end

      if @options[:debug]
        puts "  DEBUG: has_desired_sub_hash: #{has_desired_sub_hash}"
      end

      # if the system do not has proper subscritions, attach it
      if has_desired_sub_hash
        # cycle for each product
        has_desired_sub_hash.each do |product, desired_subs_hash|
          # cycle for each subscription
          desired_subs_hash.each do |desired_sub|
            if @options[:debug]
              puts "  DEBUG: current subscription to be checked"
              p desired_sub
            end
            # if subs[desired_sub] is false, retrieve the current subscription detail
            begin
              # this will retrieve the sub detail only once for each sub
              subs[desired_sub] ||= @api.resource(:subscriptions).call(:index, {:search => "id=#{desired_sub}", :organization_id => @options[:org]})['results'][0]
            # in case of error adding the subscription, stop the process
            rescue Exception => e
              puts "  ERROR: unable to retrieve subscription #{desired_sub}"
              puts e.message
              puts e.backtrace.inspect
              exit 1
            end
            # Currently Satellite do not know for Hypervisor ESXi type the number of the socket. Set to 1.
            desired_quantity = 1
            # if there are not enough available subscriptions check the next available
            if desired_quantity > subs[desired_sub]['available'].to_i and subs[desired_sub]['quantity'].to_i != -1
              puts "   Cannot add subscription #{desired_sub} (id: #{subs[desired_sub]['id']}): only #{subs[desired_sub]['available']} available, but #{desired_quantity} requested"
              next
            end

            # if requirements are met, add the subscription
            puts "   adding #{desired_sub} for #{product} (id: #{subs[desired_sub]['id']})"

            # fix the number of the available and consumed subscription because this will be retrieved only once
            subs[desired_sub]['available'] -= desired_quantity
            subs[desired_sub]['consumed'] += desired_quantity

            if not @options[:noop]
              begin
                @api.resource(:host_subscriptions).call(:add_subscriptions, {:host_id => system['id'], :subscriptions => [{:id => subs[desired_sub]['id'], :quantity => desired_quantity}]})
                puts "    Added #{desired_sub} for #{product} in system #{system['name']}"
                # stop cycling over the subscription available since the first available has been added
                break
              # in case of error adding the subscription, stop the process
              rescue Exception => e
                puts " ERROR: unable to attach subscription"
                puts e.message
                puts e.backtrace.inspect
                exit 1
              end
            else
              puts "    [noop] Added #{desired_sub} for #{product} in system #{system['name']}"
              break
            end
          end
        end
      end
    end

    if auto_attach
       puts " auto-attaching subs to system #{system['id']}"
       if not @options[:noop]
         @api.resource(:host_subscriptions).call(:auto_attach, {:host_id => system['id']})
       else
         puts " [noop] auto-attached"
       end
    end
  end

  if not @options[:usecache]
    # always write the cache file at the end, to be used in the future
    File.open(cachefile, 'w') {|f| f.write(YAML.dump({'systems' => systems, 'system_details' => system_details})) }
  end
end

vdcupdate
